diff --git a/Sources/LEDUtils/LEDColor.swift b/Sources/LEDUtils/LEDColor.swift
index 40322c4..90bdded 100644
--- a/Sources/LEDUtils/LEDColor.swift
+++ b/Sources/LEDUtils/LEDColor.swift
@@ -11,11 +11,18 @@ public struct LEDColor {
     public let red: Double
     public let green: Double
     public let blue: Double
-    
+    public let r8: UInt8
+    public let g8: UInt8
+    public let b8: UInt8
+
     public init(red: Double, green: Double, blue: Double) {
         self.red = red
         self.green = green
         self.blue = blue
+        
+        r8 = UInt8(clamping: Int(red * 255))
+        g8 = UInt8(clamping: Int(green * 255))
+        b8 = UInt8(clamping: Int(blue * 255))
     }
     
     /// Initialize from HSL color model.
@@ -38,6 +45,7 @@ public struct LEDColor {
         return LEDColor(values: values)
     }
     
+
     // predefined colors
     public static let white = Self(red: 1.0, green: 1.0, blue: 1.0)
     public static let black = Self(red: 0, green: 0, blue: 0)
diff --git a/Sources/LinuxI2CDev/I2CUmbrella.h b/Sources/LinuxI2CDev/I2CUmbrella.h
index 1e0610d..66d406e 100644
--- a/Sources/LinuxI2CDev/I2CUmbrella.h
+++ b/Sources/LinuxI2CDev/I2CUmbrella.h
@@ -1,5 +1,8 @@
 #ifdef __APPLE__
 // the I2C headers are fairly self contained; it is possible to stub them here
+#include "/Users/kit/tmp/include/linux/types.h"
+#include "/Users/kit/tmp/include/linux/i2c.h"
+#include "/Users/kit/tmp/include/linux/i2c-dev.h"
 #else
 #include <linux/types.h>
 #include <linux/i2c.h>
diff --git a/Sources/ShiftLED/ShiftLED.swift b/Sources/ShiftLED/ShiftLED.swift
index 9881c63..ee1bf7b 100644
--- a/Sources/ShiftLED/ShiftLED.swift
+++ b/Sources/ShiftLED/ShiftLED.swift
@@ -16,6 +16,7 @@ public class ShiftLED {
     let bus: LinkSPI
     var buffer: Data
     var current: Double
+    var c5: UInt8
     
     public init(bus: LinkSPI, stringLength: Int, current: Double = 0.5) {
         count = stringLength
@@ -23,17 +24,13 @@ public class ShiftLED {
         buffer = Data(repeating: 0, count: (count + 1) * 4)
         buffer.append(Data(repeating: 0xff, count: 4))
         self.current = current
+        self.c5 = UInt8(current * 31)
     }
 
     func encode(color: LEDColor, current: Double) -> [UInt8] {
-        let r8 = UInt8(clamping: Int(color.red * 255))
-        let g8 = UInt8(clamping: Int(color.green * 255))
-        let b8 = UInt8(clamping: Int(color.blue * 255))
-        
-        let c5 = UInt8(current * 31)
         let c8 = c5 | 0b1110_0000
         
-        return [c8, b8, g8, r8]
+        return [c8, color.b8, color.g8, color.r8]
     }
     
     func decode(data: Data) -> LEDColor {
